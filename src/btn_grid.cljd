
(ns btn-grid
 (:require
   ["package:flutter/material.dart" :as m]
   ;; ["package:flutter/services.dart" :as sv]
   ;; ["dart:math" :as math]
   ;; ["dart:async" :as async]
   [cljd.flutter :as f])
 (:require
  [kjf.colors :as cl]
  [kjf.dbg :as db :refer [dprn]]
  )
 )

(defn app-bar
  ([mode-props]
   (app-bar mode-props nil))
  ([mode-props name]
   (let [title-extension (when name (str "\n" name))]
      (m/AppBar .title (m/Text (str "Flutter Color Finder" title-extension)
                              .textAlign m/TextAlign.center)
                .actions
                [ (f/widget
                 :watch [mode-switch mode-props]
                 (m/IconButton
                        .icon (m/Icon (if mode-switch
                                        m/Icons.dark_mode_outlined
                                        m/Icons.light_mode_outlined))
                        .onPressed (fn [] (swap! mode-props not))))]
               .centerTitle true
               ))))

(defn make-color-map
  ([color-vec]
   (zipmap color-vec
           (mapv (fn [kii] (cl/color kii)) color-vec)))
  ([kii accent-prep]
   (let [shade-vec (into [50] (range 100 1000 100))
         acc-vec (vec (range 100 500 100))
         shade-map {:shades (zipmap
                          shade-vec (mapv (fn [k] (cl/color kii k)) shade-vec))}
         accent-map (when accent-prep
                   {:accents (zipmap
                              acc-vec (mapv (fn [k] (cl/color kii :ac k))
                                            acc-vec))} )]
     {kii (merge shade-map accent-map)}
     )))


(defn pixel
  ([mode-props kii color level]
   (pixel mode-props kii color level  nil nil))
  ([mode-props kii color level shade accent-prep]
   (f/widget
   :get [m/Navigator]
   :let [text-color (cl/determine-fg-color color :cutoff 0.32)
         tap-fn (case level
                  1 (fn [] (do (.push navigator
                                  (#/(m/MaterialPageRoute Object)
                                     .builder (f/build (color-grid mode-props kii)))
                       ) nil ) )
                  2 (fn []) )]
   (m/GestureDetector
    .onTap  tap-fn

    .child
    (m/Container
     .color color
     .child
     (m/Center
      .child
      (m/Text (str (name kii) (when accent-prep "-accent")
                   (when shade " ") shade "\n0x"
                   ;; TODO: correct to 6 figures
                   (.toUpperCase
                    (.toRadixString
                     (.-value ;(.withAlpha
                      ^m/Color color ; 0 )
                     ) 16))
                   )
              .textAlign m/TextAlign.center
              .style (m/TextStyle .color text-color
                                  ))))))))

(defn build-shade-pixels [mode-props m level]
  (let [kii (first (keys m))
        shade-map (get-in m [kii :shades])
        accent-map (get-in m [kii :accents])
        shade-vec (mapv (fn [[shade val]] (pixel mode-props kii val level shade nil))
                        (sort-by (fn [[shade val]]
                                   (.computeLuminance ^m/Color val)) shade-map) )
        accent-vec (when accent-map
                     (mapv (fn [[shade val]] (pixel mode-props kii val level shade true))
                           (sort-by (fn [[shade val]]
                                   (.computeLuminance ^m/Color val)) accent-map)) )
        filler-px (m/Container)
        filler-vec (vec (repeat 2 filler-px))]

    (vec (concat shade-vec filler-vec accent-vec))))


(defn build-pixels
  [mode-props m level]
  (let [map-count (count m)
        filler-px (m/Container)
        simple-build-fn (fn [mp]
                          (mapv
                           (fn [[kii val]] (pixel mode-props kii val level))
                           (sort-by
                            (fn [[kii val]]
                              (.computeLuminance ^m/Color val)) mp)))]
    (if (> map-count 1)
      (simple-build-fn m)
      (build-shade-pixels mode-props m level))))


(defn color-grid [mode-props kii]
  (m/Scaffold
   .appBar
   (app-bar mode-props (name kii))
   .body
   (f/widget
   :let [black-vec [:black12 :black26 :black38 :black45 :black54 :black87]
         white-vec [:white10 :white12 :white24  :white30 :white38  :white54
                    :white60  :white70]
         shade-vec (into [50] (range 100 1000 100))
         acc-vec (vec (range 100 500 100))
         [axis-count color-map] (case kii
                            :black [3 (make-color-map (into black-vec [kii]) )]
                            :white [3 (make-color-map (into white-vec [kii]) )]
                            (:brown :grey :blue-grey) [4 (make-color-map kii nil)]
                            [4 (make-color-map kii true)])
         children (build-pixels mode-props color-map 2)]
   (m/Center
    .child
    (m/AspectRatio .aspectRatio 1
                   .child (m/GridView
    .gridDelegate
    (m/SliverGridDelegateWithFixedCrossAxisCount .crossAxisCount axis-count
                                                 .mainAxisSpacing 4
                                                 .crossAxisSpacing 4
                                                 )
    .children children))))))

(defn btn-grid [mode-props]
  (let [basic-color-vec [:brown :deep-purple :purple :indigo :blue-grey :blue
                         :light-blue :cyan :teal :green :light-green :lime
                         :yellow :orange :deep-orange :red :pink :amber :grey
                         :white :black]]
   (f/widget
    :let [color-map (zipmap basic-color-vec
                             (mapv (fn [kii] (cl/color kii)) basic-color-vec) )
          children (build-pixels mode-props color-map 1)]
   (m/GridView
    .gridDelegate
    (m/SliverGridDelegateWithFixedCrossAxisCount .crossAxisCount 5
                                                 .mainAxisSpacing 4
                                                 .crossAxisSpacing 4
                                                 )
    .children children))))
