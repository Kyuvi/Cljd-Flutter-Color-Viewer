(ns btn-grid
  "Main widgets and containers used by Flutter Color Viewer."
  {:author "Kyuvi"
   :license {:name "GPL-3.0 WITH Classpath-exception-2.0"
             :url "https://www.gnu.org/licenses/gpl-3.0.html"}}
  (:require
   ["package:flutter/material.dart" :as m]
   ["dart:convert" :as cnv]
   [cljd.flutter :as f])
  (:require
   [colors :as cl]
   ))

(defn app-bar
  "App Bar with a dark mode switch (using mode-props) and also accepts
  an optional 'name' argument to add under the basic title."
  ([mode-props]
   (app-bar mode-props nil))
  ([mode-props name]
   (let [title-extension (when name (str "\n" name))]
     (m/AppBar .title (m/Text (str "Flutter Color Viewer" title-extension)
                              .textAlign m/TextAlign.center)
               .actions
               [(f/widget
                 :watch [mode-switch mode-props]
                 (m/IconButton
                  .icon (m/Icon (if mode-switch
                                  m/Icons.dark_mode_outlined
                                  m/Icons.light_mode_outlined
                                  ;; m/Icons.light_mode
                                  ))
                  .onPressed (fn [] (swap! mode-props not))))
                (f/widget
                 :context ctx
                 :let [m-info (cnv/utf8.decode;; mail
                               (cnv/base64Decode "a3l1dmlAZ214LmNvbQ=="))]
                 (m/IconButton
                  .icon (m/Icon m/Icons.info)
                  .onPressed
                  (fn [] (m/showAboutDialog
                          .context ctx
                          .applicationVersion (str "Version " 1.0)
                          .applicationLegalese
                          (str "Â© 2024 Kyuvi.\n"
                               ;; m-info "\n"
                               "Released under the GPL 3.0 license.\n"
                               )
                          .children
                          [(m/Text
                            ;; TODO: add links?
                            (str
                             "\nView Flutter's color constants and their values.\n"
                             "\nWritten in ClojureDart.")
                            .textAlign m/TextAlign.center)
                           (m/Text "\n\nContact info:")
                           (m/SelectableText m-info)
                           ]
                          ))))
                ]
               .centerTitle true))))


(defn color-name-str
  "Return a string containing the full name of the color depending on
  name (str) shade (int) and accent-prep (bool)."
  [name shade accent-prep]
  (str name (when accent-prep "-accent") (when shade " ") shade))

(defn color-text
  "Return a Text object based on the color-props and text-props maps."
  [color-props text-props]
  (let [{:keys [kii color shade accent]} color-props
        {:keys [height text-color level]} text-props
        {:flds [red green blue alpha opacity value]} ^m/Color color
        c-height (if height height double.maxFinite)
        padding-val (if (and max (> c-height 200) ) 20 0)
        ]
     (
     ;; m/Padding
     m/AnimatedPadding
     .padding (m/EdgeInsets.symmetric .vertical padding-val )
     .duration (Duration .milliseconds 350)
     .child
     (m/Text (str (color-name-str (name kii) shade accent)
                  (when (and (> c-height 64)
                             (or (not (and accent (= level 2)))
                                 (> c-height 79)))
                    (str  "\n0x" (.toUpperCase (.toRadixString
                                                value 16))))
                  (when (or (and (= level 3) (> c-height 114))  #_(> c-height 200))
                    (str "\n\nRed = " red
                         "\nGreen = " green
                         "\nBlue = " blue "\n"
                         "\nAlpha = " alpha "\n"
                         "Opacity = " opacity ))
                  ;; "\n" height " " level
                  )
             .textAlign m/TextAlign.center
             .style (m/TextStyle .color text-color
                                 .fontSize (cond (< c-height 50) 10
                                                 (> c-height 208) 32))))))


(defn color-container
  "Return a page of color 'color' accented and shaded if appropriate
   with its properties written in color text-color."
  ([mode-props color-desc-vec]
   (let [[kii color text-color shade accent-prep] color-desc-vec]
     (m/Scaffold
      .appBar (app-bar mode-props
                       (color-name-str (name kii) shade accent-prep))
      .body
       (m/LayoutBuilder
        .builder
        (f/build [constr]
                 :let [{:flds [maxHeight]} ^m/BoxConstraints constr
                       padding (cond (> maxHeight 400) 40
                                     (> maxHeight 220) 20
                                     :else 10)]
                  (m/AnimatedPadding
                  .padding (m/EdgeInsets.all padding)
                  .duration (Duration .milliseconds 350)
                  .child
                  (m/Container
                  ;; .color color ;; not needed when decoration is used
                  .decoration (m/BoxDecoration
                               .color color
                               ;; .border (m/Border.all .color (cl/darken color 25)
                                                     ;; .width (/ maxHeight 200))
                               .borderRadius (m/BorderRadius.circular (/ maxHeight 20))
                               )
                  .child (m/Center .child
                                   (m/FittedBox
                                    .child
                                    (color-text {:kii kii
                                                 :color color
                                                 :shade shade
                                                 :accent accent-prep }
                                                {:height maxHeight
                                                 :text-color text-color
                                                 :level 3} )))))))))))

(defn make-color-map
  "Create a color map from a vector of color keywords,
  or a keyword and an accent-preposition.
  [color-vec] returns a map of color keywords to colors.
  [kii accent-prep] returns a map in the form
  {:color {:shades shade-map} {:accents accent-map}}
  shade-map and accent maps are number to color maps
  accent map is only present if accent-prep is true."
  ([color-vec]
   (zipmap color-vec
           (mapv (fn [kii] (cl/color kii)) color-vec)))
  ([kii accent-prep]
   (let [shade-vec (into [50] (range 100 1000 100))
         acc-vec (vec (range 100 500 100))
         shade-map {:shades (zipmap
                             shade-vec
                             (mapv (fn [k] (cl/color kii k)) shade-vec))}
         accent-map (when accent-prep
                      {:accents (zipmap
                                 acc-vec (mapv (fn [k] (cl/color kii :ac k))
                                               acc-vec))} )]
     {kii (merge shade-map accent-map)} )))

(defn push-to-navigator [nav page]
  (.push ^m/NavigatorState nav
         (#/(m/MaterialPageRoute Object)
            .builder (f/build page))))

;; called from pixel, not needed in clojureDart but "consistency".
(declare color-grid)

(defn pixel
  "Grid pixel which can be tapped to open up the color to different
  shades/opacities depending on the keyword (kii) and the level.
  The color of the pixel is 'color' and it also prints the name of the color
  with the shade and accent if given."
  ([mode-props kii color level]
   (pixel mode-props kii color level  nil nil))
  ([mode-props kii color level shade accent-prep]
   (f/widget
    :get [m/Navigator]
    :let [text-color (cl/determine-fg-color color :use-alpha false :cutoff 0.32)
          tap-fn (case level
                   1 (fn [] (do
                              (push-to-navigator navigator
                                                 (color-grid mode-props kii))
                              nil))
                   2 (fn [] (do (push-to-navigator
                                 navigator
                                 (color-container mode-props
                                                  [kii color text-color
                                                   shade accent-prep]))
                                nil)))]
    (m/LayoutBuilder
     .builder
     (f/build
      [constr]
      :let [{:flds [maxHeight]} ^m/BoxConstraints constr]
      (m/GestureDetector
       .onTap tap-fn
       .child
       (m/Container
        .color color
        .child
        (m/Center
         .child (color-text {:kii kii
                             :color color
                             :shade shade
                             :accent accent-prep}
                            {:height maxHeight
                             :text-color text-color
                             :level level} )))))))))

(defn build-shade-pixels
  "Returns a vector of pixels for shade colors.
  m should be a map of the form
  {:color {:shades shade-map} {:accents accent-map}}
  with a the accents-map being optional."
  [mode-props m level]
  (let [kii (first (keys m))
        shade-map (get-in m [kii :shades])
        accent-map (get-in m [kii :accents])
        shade-vec (mapv (fn [[shade val]]
                          (pixel mode-props kii val level shade nil))
                        (sort-by (fn [[shade val]]
                                   (.computeLuminance ^m/Color val)) shade-map))
        accent-vec (when accent-map
                     (mapv (fn [[shade val]]
                             (pixel mode-props kii val level shade true))
                           (sort-by (fn [[shade val]]
                                      (.computeLuminance ^m/Color val))
                                    accent-map)))
        filler-px (m/Container)
        filler-vec (vec (repeat 2 filler-px))]

    (vec (concat shade-vec filler-vec accent-vec))))


(defn build-pixels
  "Returns the grid pixel based on the number of key-val pairs in the map 'm'."
  [mode-props m level]
  (let [map-count (count m)
        filler-px (m/Container)
        simple-build-fn (fn [mp]
                          (mapv
                           (fn [[kii val]] (pixel mode-props kii val level))
                           (sort-by
                            (fn [[kii val]]
                              (.computeLuminance ^m/Color val)) mp)))]
    (if (> map-count 1)
      (simple-build-fn m)
      (build-shade-pixels mode-props m level))))


(defn color-grid
  "Return a Page with a grid and an app-bar with a theme-switch for the color
  represented by kii."
  [mode-props kii]
  (m/Scaffold
   .appBar
   (app-bar mode-props (name kii))
   .body
   (f/widget
    :let [black-vec [:black12 :black26 :black38 :black45 :black54 :black87]
          white-vec [:white10 :white12 :white24  :white30 :white38  :white54
                     :white60  :white70]
          shade-vec (into [50] (range 100 1000 100))
          acc-vec (vec (range 100 500 100))
          [axis-count color-map] (case kii
                                   :black [3 (make-color-map
                                              (into black-vec [kii]))]
                                   :white [3 (make-color-map
                                              (into white-vec [kii]))]
                                   (:brown :grey :blue-grey) [4 (make-color-map kii nil)]
                                   [4 (make-color-map kii true)])
          children (build-pixels mode-props color-map 2)]
    (m/Center
     .child
     (m/AspectRatio
      .aspectRatio 1
      .child
      (m/GridView
       .gridDelegate
       (m/SliverGridDelegateWithFixedCrossAxisCount .crossAxisCount axis-count
                                                    .mainAxisSpacing 4
                                                    .crossAxisSpacing 4)
       .children children))))))

(defn btn-grid
  "Returns a grid with live pixels that when clicked switch the page to
  a page based on that color."
  [mode-props]
  (let [basic-color-vec [:brown :deep-purple :purple :indigo :blue-grey :blue
                         :light-blue :cyan :teal :green :light-green :lime
                         :yellow :orange :deep-orange :red :pink :amber :grey
                         :white :black]]
    (f/widget
     :let [color-map (zipmap basic-color-vec
                             (mapv (fn [kii] (cl/color kii)) basic-color-vec) )
           children (build-pixels mode-props color-map 1)]
     (m/GridView
      .gridDelegate
      (m/SliverGridDelegateWithFixedCrossAxisCount .crossAxisCount 5
                                                   .mainAxisSpacing 4
                                                   .crossAxisSpacing 4)
      .children children))))
